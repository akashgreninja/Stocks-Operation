{"version":3,"file":"index.js","sources":["../utils/injectScript.ts","../utils/isAnyScriptPresent.ts","../index.tsx"],"sourcesContent":["export default (scriptSrc: string): void => {\n  const script = document.createElement('script');\n\n  script.async = true;\n  script.defer = true;\n  script.src = scriptSrc;\n\n  if (document.head) {\n    document.head.appendChild(script);\n  }\n};\n","export default (regex: RegExp): boolean =>\n  Array.from(document.scripts).reduce<boolean>(\n    (isPresent, script) => (isPresent ? isPresent : regex.test(script.src)),\n    false\n  );\n","import React, { Component, ReactNode } from 'react';\n\nimport injectScript from './utils/injectScript';\nimport isAnyScriptPresent from './utils/isAnyScriptPresent';\n\ndeclare global {\n  interface Window {\n    grecaptcha?: Grecaptcha;\n  }\n}\n\nexport type Grecaptcha = {\n  ready: (callback: () => void) => void;\n  render: (container?: HTMLElement, config?: RecaptchaConfig) => number;\n  reset: (id?: number) => void;\n  execute: (id?: number) => void;\n  getResponse: (id?: number) => string;\n};\n\ntype RecaptchaBaseConfig = {\n  sitekey: string;\n  theme?: 'light' | 'dark';\n  size?: 'compact' | 'normal' | 'invisible';\n  badge?: 'bottomright' | 'bottomleft' | 'inline';\n  tabindex?: number;\n  hl?: string;\n  isolated?: boolean;\n};\n\ntype RecaptchaConfig = RecaptchaBaseConfig & {\n  callback?: (response: string) => void;\n  'expired-callback'?: () => void;\n  'error-callback'?: () => void;\n};\n\nexport type RenderProps = {\n  renderExplicitly: () => Promise<void>;\n  reset: () => Promise<void>;\n  execute: () => Promise<void>;\n  getResponse: () => Promise<string>;\n  recaptchaComponent: ReactNode;\n};\n\nexport type Props = RecaptchaBaseConfig & {\n  id?: string;\n  className?: string;\n  explicit?: boolean;\n  onLoad?: () => void;\n  onRender?: () => void;\n  onVerify: (response: string) => void;\n  onExpire?: () => void;\n  onError?: () => void;\n  inject?: boolean;\n  children?: (renderProps: RenderProps) => ReactNode;\n};\n\ntype State = {\n  instanceKey: number;\n  instanceId?: number;\n  ready: boolean;\n  rendered: boolean;\n  invisible: boolean;\n};\n\nconst RECAPTCHA_SCRIPT_URL = 'https://recaptcha.net/recaptcha/api.js';\nconst RECAPTCHA_SCRIPT_REGEX = /(http|https):\\/\\/(www)?.+\\/recaptcha/;\n\nconst PROPS_THAT_SHOULD_CAUSE_RERENDER: Array<keyof RecaptchaBaseConfig> = [\n  'sitekey',\n  'theme',\n  'size',\n  'badge',\n  'tabindex',\n  'hl',\n  'isolated'\n];\n\nclass Reaptcha extends Component<Props, State> {\n  container?: HTMLDivElement | null;\n  timer?: number | undefined;\n\n  state: State = {\n    instanceKey: Date.now(),\n    ready: false,\n    rendered: false,\n    invisible: this.props.size === 'invisible'\n  };\n\n  static defaultProps: Partial<Props> = {\n    id: '',\n    className: 'g-recaptcha',\n    theme: 'light',\n    size: 'normal',\n    badge: 'bottomright',\n    tabindex: 0,\n    explicit: false,\n    inject: true,\n    isolated: false,\n    hl: ''\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const invisible = props.size === 'invisible';\n    if (invisible !== state.invisible) {\n      return { invisible };\n    }\n    return null;\n  }\n\n  _isAvailable = (): boolean => Boolean(window.grecaptcha?.ready);\n\n  _inject = (): void => {\n    if (this.props.inject && !isAnyScriptPresent(RECAPTCHA_SCRIPT_REGEX)) {\n      const hlParam = this.props.hl ? `&hl=${this.props.hl}` : '';\n      const src = `${RECAPTCHA_SCRIPT_URL}?render=explicit${hlParam}`;\n      injectScript(src);\n    }\n  };\n\n  _prepare = (): void => {\n    const { explicit, onLoad } = this.props;\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n    window.grecaptcha.ready(() => {\n      this.setState({ ready: true }, () => {\n        if (!explicit) {\n          this.renderExplicitly();\n        }\n        if (onLoad) {\n          onLoad();\n        }\n      });\n    });\n  };\n\n  _renderRecaptcha = (\n    container: HTMLDivElement,\n    config: RecaptchaConfig\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n  ): number => window.grecaptcha.render(container, config);\n\n  // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n  _resetRecaptcha = (): void => window.grecaptcha.reset(this.state.instanceId);\n\n  _executeRecaptcha = (): void =>\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n    window.grecaptcha.execute(this.state.instanceId);\n\n  _getResponseRecaptcha = (): string =>\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n    window.grecaptcha.getResponse(this.state.instanceId);\n\n  _onVerify = (response: string) => this.props.onVerify(response);\n\n  _onExpire = () => this.props.onExpire && this.props.onExpire();\n\n  _onError = () => this.props.onError && this.props.onError();\n\n  _stopTimer = (): void => {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  };\n\n  componentDidMount = (): void => {\n    this._inject();\n\n    if (this._isAvailable()) {\n      this._prepare();\n    } else {\n      this.timer = window.setInterval(() => {\n        if (this._isAvailable()) {\n          this._prepare();\n          this._stopTimer();\n        }\n      }, 500);\n    }\n  };\n\n  componentDidUpdate(prevProps: Readonly<Props>) {\n    const changedProps = PROPS_THAT_SHOULD_CAUSE_RERENDER.reduce<\n      Array<keyof RecaptchaBaseConfig>\n    >((changedProps, key) => {\n      if (this.props[key] !== prevProps[key]) {\n        return [...changedProps, key];\n      }\n      return changedProps;\n    }, []);\n\n    if (changedProps.length > 0) {\n      this.setState(\n        {\n          instanceKey: Date.now(),\n          rendered: false\n        },\n        () => {\n          if (!this.props.explicit) {\n            this.renderExplicitly();\n          }\n        }\n      );\n    }\n  }\n\n  componentWillUnmount = (): void => {\n    this._stopTimer();\n  };\n\n  renderExplicitly = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      if (this.state.rendered) {\n        return reject(\n          new Error('This recaptcha instance has been already rendered.')\n        );\n      }\n      if (this.state.ready && this.container) {\n        const instanceId = this._renderRecaptcha(this.container, {\n          sitekey: this.props.sitekey,\n          theme: this.props.theme,\n          size: this.props.size,\n          badge: this.state.invisible ? this.props.badge : undefined,\n          tabindex: this.props.tabindex,\n          callback: this._onVerify,\n          'expired-callback': this._onExpire,\n          'error-callback': this._onError,\n          isolated: this.state.invisible ? this.props.isolated : undefined,\n          hl: this.state.invisible ? undefined : this.props.hl\n        });\n\n        this.setState(\n          {\n            instanceId,\n            rendered: true\n          },\n          () => {\n            if (this.props.onRender) {\n              this.props.onRender();\n            }\n            resolve();\n          }\n        );\n      } else {\n        return reject(new Error('Recaptcha is not ready for rendering yet.'));\n      }\n    });\n  };\n\n  reset = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      if (this.state.rendered) {\n        this._resetRecaptcha();\n        return resolve();\n      }\n      reject(new Error('This recaptcha instance did not render yet.'));\n    });\n  };\n\n  execute = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      if (!this.state.invisible) {\n        return reject(\n          new Error('Manual execution is only available for invisible size.')\n        );\n      }\n      if (this.state.rendered) {\n        this._executeRecaptcha();\n        resolve();\n      }\n      return reject(new Error('This recaptcha instance did not render yet.'));\n    });\n  };\n\n  getResponse = (): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (this.state.rendered) {\n        const response = this._getResponseRecaptcha();\n        return resolve(response);\n      }\n      reject(new Error('This recaptcha instance did not render yet.'));\n    });\n  };\n\n  render = () => {\n    const container = (\n      <div\n        key={this.state.instanceKey}\n        id={this.props.id}\n        className={this.props.className}\n        ref={e => (this.container = e)}\n      />\n    );\n\n    return this.props.children\n      ? this.props.children({\n          renderExplicitly: this.renderExplicitly,\n          reset: this.reset,\n          execute: this.execute,\n          getResponse: this.getResponse,\n          recaptchaComponent: container\n        })\n      : container;\n  };\n}\n\nexport default Reaptcha;\n"],"names":["scriptSrc","script","document","createElement","async","defer","src","head","appendChild","regex","Array","from","scripts","reduce","isPresent","test","RECAPTCHA_SCRIPT_REGEX","PROPS_THAT_SHOULD_CAUSE_RERENDER","Reaptcha","container","timer","state","instanceKey","Date","now","ready","rendered","invisible","_this","props","size","_isAvailable","Boolean","window","grecaptcha","_window$grecaptcha","_inject","inject","isAnyScriptPresent","injectScript","RECAPTCHA_SCRIPT_URL","hl","_prepare","explicit","onLoad","setState","renderExplicitly","_renderRecaptcha","config","render","_resetRecaptcha","reset","instanceId","_executeRecaptcha","execute","_getResponseRecaptcha","getResponse","_onVerify","response","onVerify","_onExpire","onExpire","_onError","onError","_stopTimer","clearInterval","componentDidMount","setInterval","componentWillUnmount","Promise","resolve","reject","Error","sitekey","theme","badge","undefined","tabindex","callback","isolated","onRender","React","key","id","className","ref","e","children","recaptchaComponent","getDerivedStateFromProps","componentDidUpdate","prevProps","changedProps","_this2","length","this","Component","defaultProps"],"mappings":"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"}