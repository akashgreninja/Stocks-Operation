{"version":3,"file":"index.modern.js","sources":["../index.tsx","../utils/isAnyScriptPresent.ts","../utils/injectScript.ts"],"sourcesContent":["import React, { Component, ReactNode } from 'react';\n\nimport injectScript from './utils/injectScript';\nimport isAnyScriptPresent from './utils/isAnyScriptPresent';\n\ndeclare global {\n  interface Window {\n    grecaptcha?: Grecaptcha;\n  }\n}\n\nexport type Grecaptcha = {\n  ready: (callback: () => void) => void;\n  render: (container?: HTMLElement, config?: RecaptchaConfig) => number;\n  reset: (id?: number) => void;\n  execute: (id?: number) => void;\n  getResponse: (id?: number) => string;\n};\n\ntype RecaptchaBaseConfig = {\n  sitekey: string;\n  theme?: 'light' | 'dark';\n  size?: 'compact' | 'normal' | 'invisible';\n  badge?: 'bottomright' | 'bottomleft' | 'inline';\n  tabindex?: number;\n  hl?: string;\n  isolated?: boolean;\n};\n\ntype RecaptchaConfig = RecaptchaBaseConfig & {\n  callback?: (response: string) => void;\n  'expired-callback'?: () => void;\n  'error-callback'?: () => void;\n};\n\nexport type RenderProps = {\n  renderExplicitly: () => Promise<void>;\n  reset: () => Promise<void>;\n  execute: () => Promise<void>;\n  getResponse: () => Promise<string>;\n  recaptchaComponent: ReactNode;\n};\n\nexport type Props = RecaptchaBaseConfig & {\n  id?: string;\n  className?: string;\n  explicit?: boolean;\n  onLoad?: () => void;\n  onRender?: () => void;\n  onVerify: (response: string) => void;\n  onExpire?: () => void;\n  onError?: () => void;\n  inject?: boolean;\n  children?: (renderProps: RenderProps) => ReactNode;\n};\n\ntype State = {\n  instanceKey: number;\n  instanceId?: number;\n  ready: boolean;\n  rendered: boolean;\n  invisible: boolean;\n};\n\nconst RECAPTCHA_SCRIPT_URL = 'https://recaptcha.net/recaptcha/api.js';\nconst RECAPTCHA_SCRIPT_REGEX = /(http|https):\\/\\/(www)?.+\\/recaptcha/;\n\nconst PROPS_THAT_SHOULD_CAUSE_RERENDER: Array<keyof RecaptchaBaseConfig> = [\n  'sitekey',\n  'theme',\n  'size',\n  'badge',\n  'tabindex',\n  'hl',\n  'isolated'\n];\n\nclass Reaptcha extends Component<Props, State> {\n  container?: HTMLDivElement | null;\n  timer?: number | undefined;\n\n  state: State = {\n    instanceKey: Date.now(),\n    ready: false,\n    rendered: false,\n    invisible: this.props.size === 'invisible'\n  };\n\n  static defaultProps: Partial<Props> = {\n    id: '',\n    className: 'g-recaptcha',\n    theme: 'light',\n    size: 'normal',\n    badge: 'bottomright',\n    tabindex: 0,\n    explicit: false,\n    inject: true,\n    isolated: false,\n    hl: ''\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const invisible = props.size === 'invisible';\n    if (invisible !== state.invisible) {\n      return { invisible };\n    }\n    return null;\n  }\n\n  _isAvailable = (): boolean => Boolean(window.grecaptcha?.ready);\n\n  _inject = (): void => {\n    if (this.props.inject && !isAnyScriptPresent(RECAPTCHA_SCRIPT_REGEX)) {\n      const hlParam = this.props.hl ? `&hl=${this.props.hl}` : '';\n      const src = `${RECAPTCHA_SCRIPT_URL}?render=explicit${hlParam}`;\n      injectScript(src);\n    }\n  };\n\n  _prepare = (): void => {\n    const { explicit, onLoad } = this.props;\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n    window.grecaptcha.ready(() => {\n      this.setState({ ready: true }, () => {\n        if (!explicit) {\n          this.renderExplicitly();\n        }\n        if (onLoad) {\n          onLoad();\n        }\n      });\n    });\n  };\n\n  _renderRecaptcha = (\n    container: HTMLDivElement,\n    config: RecaptchaConfig\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n  ): number => window.grecaptcha.render(container, config);\n\n  // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n  _resetRecaptcha = (): void => window.grecaptcha.reset(this.state.instanceId);\n\n  _executeRecaptcha = (): void =>\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n    window.grecaptcha.execute(this.state.instanceId);\n\n  _getResponseRecaptcha = (): string =>\n    // @ts-expect-error: Unreachable code error. We ensure window.grecaptcha is available before executing this method.\n    window.grecaptcha.getResponse(this.state.instanceId);\n\n  _onVerify = (response: string) => this.props.onVerify(response);\n\n  _onExpire = () => this.props.onExpire && this.props.onExpire();\n\n  _onError = () => this.props.onError && this.props.onError();\n\n  _stopTimer = (): void => {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  };\n\n  componentDidMount = (): void => {\n    this._inject();\n\n    if (this._isAvailable()) {\n      this._prepare();\n    } else {\n      this.timer = window.setInterval(() => {\n        if (this._isAvailable()) {\n          this._prepare();\n          this._stopTimer();\n        }\n      }, 500);\n    }\n  };\n\n  componentDidUpdate(prevProps: Readonly<Props>) {\n    const changedProps = PROPS_THAT_SHOULD_CAUSE_RERENDER.reduce<\n      Array<keyof RecaptchaBaseConfig>\n    >((changedProps, key) => {\n      if (this.props[key] !== prevProps[key]) {\n        return [...changedProps, key];\n      }\n      return changedProps;\n    }, []);\n\n    if (changedProps.length > 0) {\n      this.setState(\n        {\n          instanceKey: Date.now(),\n          rendered: false\n        },\n        () => {\n          if (!this.props.explicit) {\n            this.renderExplicitly();\n          }\n        }\n      );\n    }\n  }\n\n  componentWillUnmount = (): void => {\n    this._stopTimer();\n  };\n\n  renderExplicitly = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      if (this.state.rendered) {\n        return reject(\n          new Error('This recaptcha instance has been already rendered.')\n        );\n      }\n      if (this.state.ready && this.container) {\n        const instanceId = this._renderRecaptcha(this.container, {\n          sitekey: this.props.sitekey,\n          theme: this.props.theme,\n          size: this.props.size,\n          badge: this.state.invisible ? this.props.badge : undefined,\n          tabindex: this.props.tabindex,\n          callback: this._onVerify,\n          'expired-callback': this._onExpire,\n          'error-callback': this._onError,\n          isolated: this.state.invisible ? this.props.isolated : undefined,\n          hl: this.state.invisible ? undefined : this.props.hl\n        });\n\n        this.setState(\n          {\n            instanceId,\n            rendered: true\n          },\n          () => {\n            if (this.props.onRender) {\n              this.props.onRender();\n            }\n            resolve();\n          }\n        );\n      } else {\n        return reject(new Error('Recaptcha is not ready for rendering yet.'));\n      }\n    });\n  };\n\n  reset = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      if (this.state.rendered) {\n        this._resetRecaptcha();\n        return resolve();\n      }\n      reject(new Error('This recaptcha instance did not render yet.'));\n    });\n  };\n\n  execute = (): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      if (!this.state.invisible) {\n        return reject(\n          new Error('Manual execution is only available for invisible size.')\n        );\n      }\n      if (this.state.rendered) {\n        this._executeRecaptcha();\n        resolve();\n      }\n      return reject(new Error('This recaptcha instance did not render yet.'));\n    });\n  };\n\n  getResponse = (): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (this.state.rendered) {\n        const response = this._getResponseRecaptcha();\n        return resolve(response);\n      }\n      reject(new Error('This recaptcha instance did not render yet.'));\n    });\n  };\n\n  render = () => {\n    const container = (\n      <div\n        key={this.state.instanceKey}\n        id={this.props.id}\n        className={this.props.className}\n        ref={e => (this.container = e)}\n      />\n    );\n\n    return this.props.children\n      ? this.props.children({\n          renderExplicitly: this.renderExplicitly,\n          reset: this.reset,\n          execute: this.execute,\n          getResponse: this.getResponse,\n          recaptchaComponent: container\n        })\n      : container;\n  };\n}\n\nexport default Reaptcha;\n","export default (regex: RegExp): boolean =>\n  Array.from(document.scripts).reduce<boolean>(\n    (isPresent, script) => (isPresent ? isPresent : regex.test(script.src)),\n    false\n  );\n","export default (scriptSrc: string): void => {\n  const script = document.createElement('script');\n\n  script.async = true;\n  script.defer = true;\n  script.src = scriptSrc;\n\n  if (document.head) {\n    document.head.appendChild(script);\n  }\n};\n"],"names":["RECAPTCHA_SCRIPT_REGEX","PROPS_THAT_SHOULD_CAUSE_RERENDER","Reaptcha","Component","container","timer","state","instanceKey","Date","now","ready","rendered","invisible","this","props","size","_isAvailable","Boolean","window","grecaptcha","_window$grecaptcha","_inject","regex","inject","Array","from","document","scripts","reduce","isPresent","script","test","src","scriptSrc","createElement","async","defer","head","appendChild","injectScript","hl","_prepare","explicit","onLoad","setState","renderExplicitly","_renderRecaptcha","config","render","_resetRecaptcha","reset","instanceId","_executeRecaptcha","execute","_getResponseRecaptcha","getResponse","_onVerify","response","onVerify","_onExpire","onExpire","_onError","onError","_stopTimer","clearInterval","componentDidMount","setInterval","componentWillUnmount","Promise","resolve","reject","Error","sitekey","theme","badge","undefined","tabindex","callback","isolated","onRender","React","key","id","className","ref","e","children","recaptchaComponent","static","componentDidUpdate","prevProps","changedProps","length","defaultProps"],"mappings":"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"}