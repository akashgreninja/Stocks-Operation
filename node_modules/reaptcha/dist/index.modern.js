import e,{Component as t}from"react";const i=/(http|https):\/\/(www)?.+\/recaptcha/,s=["sitekey","theme","size","badge","tabindex","hl","isolated"];class r extends t{constructor(...t){super(...t),this.container=void 0,this.timer=void 0,this.state={instanceKey:Date.now(),ready:!1,rendered:!1,invisible:"invisible"===this.props.size},this._isAvailable=()=>{var e;return Boolean(null==(e=window.grecaptcha)?void 0:e.ready)},this._inject=()=>{var e;this.props.inject&&(e=i,!Array.from(document.scripts).reduce((t,i)=>t||e.test(i.src),!1))&&(e=>{const t=document.createElement("script");t.async=!0,t.defer=!0,t.src=e,document.head&&document.head.appendChild(t)})("https://recaptcha.net/recaptcha/api.js?render=explicit"+(this.props.hl?`&hl=${this.props.hl}`:""))},this._prepare=()=>{const{explicit:e,onLoad:t}=this.props;window.grecaptcha.ready(()=>{this.setState({ready:!0},()=>{e||this.renderExplicitly(),t&&t()})})},this._renderRecaptcha=(e,t)=>window.grecaptcha.render(e,t),this._resetRecaptcha=()=>window.grecaptcha.reset(this.state.instanceId),this._executeRecaptcha=()=>window.grecaptcha.execute(this.state.instanceId),this._getResponseRecaptcha=()=>window.grecaptcha.getResponse(this.state.instanceId),this._onVerify=e=>this.props.onVerify(e),this._onExpire=()=>this.props.onExpire&&this.props.onExpire(),this._onError=()=>this.props.onError&&this.props.onError(),this._stopTimer=()=>{this.timer&&clearInterval(this.timer)},this.componentDidMount=()=>{this._inject(),this._isAvailable()?this._prepare():this.timer=window.setInterval(()=>{this._isAvailable()&&(this._prepare(),this._stopTimer())},500)},this.componentWillUnmount=()=>{this._stopTimer()},this.renderExplicitly=()=>new Promise((e,t)=>{if(this.state.rendered)return t(new Error("This recaptcha instance has been already rendered."));if(!this.state.ready||!this.container)return t(new Error("Recaptcha is not ready for rendering yet."));{const t=this._renderRecaptcha(this.container,{sitekey:this.props.sitekey,theme:this.props.theme,size:this.props.size,badge:this.state.invisible?this.props.badge:void 0,tabindex:this.props.tabindex,callback:this._onVerify,"expired-callback":this._onExpire,"error-callback":this._onError,isolated:this.state.invisible?this.props.isolated:void 0,hl:this.state.invisible?void 0:this.props.hl});this.setState({instanceId:t,rendered:!0},()=>{this.props.onRender&&this.props.onRender(),e()})}}),this.reset=()=>new Promise((e,t)=>{if(this.state.rendered)return this._resetRecaptcha(),e();t(new Error("This recaptcha instance did not render yet."))}),this.execute=()=>new Promise((e,t)=>this.state.invisible?(this.state.rendered&&(this._executeRecaptcha(),e()),t(new Error("This recaptcha instance did not render yet."))):t(new Error("Manual execution is only available for invisible size."))),this.getResponse=()=>new Promise((e,t)=>{if(this.state.rendered)return e(this._getResponseRecaptcha());t(new Error("This recaptcha instance did not render yet."))}),this.render=()=>{const t=/*#__PURE__*/e.createElement("div",{key:this.state.instanceKey,id:this.props.id,className:this.props.className,ref:e=>this.container=e});return this.props.children?this.props.children({renderExplicitly:this.renderExplicitly,reset:this.reset,execute:this.execute,getResponse:this.getResponse,recaptchaComponent:t}):t}}static getDerivedStateFromProps(e,t){const i="invisible"===e.size;return i!==t.invisible?{invisible:i}:null}componentDidUpdate(e){s.reduce((t,i)=>this.props[i]!==e[i]?[...t,i]:t,[]).length>0&&this.setState({instanceKey:Date.now(),rendered:!1},()=>{this.props.explicit||this.renderExplicitly()})}}r.defaultProps={id:"",className:"g-recaptcha",theme:"light",size:"normal",badge:"bottomright",tabindex:0,explicit:!1,inject:!0,isolated:!1,hl:""};export{r as default};
//# sourceMappingURL=index.modern.js.map
